/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.1)", date = "2021-03-25")
public class ComplexOperands implements org.apache.thrift.TBase<ComplexOperands, ComplexOperands._Fields>, java.io.Serializable, Cloneable, Comparable<ComplexOperands> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ComplexOperands");

  private static final org.apache.thrift.protocol.TField COMPLEX_OPERAND1_FIELD_DESC = new org.apache.thrift.protocol.TField("complexOperand1", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField COMPLEX_OPERAND2_FIELD_DESC = new org.apache.thrift.protocol.TField("complexOperand2", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ComplexOperandsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ComplexOperandsTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> complexOperand1; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> complexOperand2; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMPLEX_OPERAND1((short)1, "complexOperand1"),
    COMPLEX_OPERAND2((short)2, "complexOperand2");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMPLEX_OPERAND1
          return COMPLEX_OPERAND1;
        case 2: // COMPLEX_OPERAND2
          return COMPLEX_OPERAND2;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMPLEX_OPERAND1, new org.apache.thrift.meta_data.FieldMetaData("complexOperand1", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.COMPLEX_OPERAND2, new org.apache.thrift.meta_data.FieldMetaData("complexOperand2", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ComplexOperands.class, metaDataMap);
  }

  public ComplexOperands() {
  }

  public ComplexOperands(
    java.util.List<java.lang.Double> complexOperand1,
    java.util.List<java.lang.Double> complexOperand2)
  {
    this();
    this.complexOperand1 = complexOperand1;
    this.complexOperand2 = complexOperand2;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ComplexOperands(ComplexOperands other) {
    if (other.isSetComplexOperand1()) {
      java.util.List<java.lang.Double> __this__complexOperand1 = new java.util.ArrayList<java.lang.Double>(other.complexOperand1);
      this.complexOperand1 = __this__complexOperand1;
    }
    if (other.isSetComplexOperand2()) {
      java.util.List<java.lang.Double> __this__complexOperand2 = new java.util.ArrayList<java.lang.Double>(other.complexOperand2);
      this.complexOperand2 = __this__complexOperand2;
    }
  }

  public ComplexOperands deepCopy() {
    return new ComplexOperands(this);
  }

  @Override
  public void clear() {
    this.complexOperand1 = null;
    this.complexOperand2 = null;
  }

  public int getComplexOperand1Size() {
    return (this.complexOperand1 == null) ? 0 : this.complexOperand1.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getComplexOperand1Iterator() {
    return (this.complexOperand1 == null) ? null : this.complexOperand1.iterator();
  }

  public void addToComplexOperand1(double elem) {
    if (this.complexOperand1 == null) {
      this.complexOperand1 = new java.util.ArrayList<java.lang.Double>();
    }
    this.complexOperand1.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getComplexOperand1() {
    return this.complexOperand1;
  }

  public ComplexOperands setComplexOperand1(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> complexOperand1) {
    this.complexOperand1 = complexOperand1;
    return this;
  }

  public void unsetComplexOperand1() {
    this.complexOperand1 = null;
  }

  /** Returns true if field complexOperand1 is set (has been assigned a value) and false otherwise */
  public boolean isSetComplexOperand1() {
    return this.complexOperand1 != null;
  }

  public void setComplexOperand1IsSet(boolean value) {
    if (!value) {
      this.complexOperand1 = null;
    }
  }

  public int getComplexOperand2Size() {
    return (this.complexOperand2 == null) ? 0 : this.complexOperand2.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getComplexOperand2Iterator() {
    return (this.complexOperand2 == null) ? null : this.complexOperand2.iterator();
  }

  public void addToComplexOperand2(double elem) {
    if (this.complexOperand2 == null) {
      this.complexOperand2 = new java.util.ArrayList<java.lang.Double>();
    }
    this.complexOperand2.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getComplexOperand2() {
    return this.complexOperand2;
  }

  public ComplexOperands setComplexOperand2(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> complexOperand2) {
    this.complexOperand2 = complexOperand2;
    return this;
  }

  public void unsetComplexOperand2() {
    this.complexOperand2 = null;
  }

  /** Returns true if field complexOperand2 is set (has been assigned a value) and false otherwise */
  public boolean isSetComplexOperand2() {
    return this.complexOperand2 != null;
  }

  public void setComplexOperand2IsSet(boolean value) {
    if (!value) {
      this.complexOperand2 = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case COMPLEX_OPERAND1:
      if (value == null) {
        unsetComplexOperand1();
      } else {
        setComplexOperand1((java.util.List<java.lang.Double>)value);
      }
      break;

    case COMPLEX_OPERAND2:
      if (value == null) {
        unsetComplexOperand2();
      } else {
        setComplexOperand2((java.util.List<java.lang.Double>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case COMPLEX_OPERAND1:
      return getComplexOperand1();

    case COMPLEX_OPERAND2:
      return getComplexOperand2();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case COMPLEX_OPERAND1:
      return isSetComplexOperand1();
    case COMPLEX_OPERAND2:
      return isSetComplexOperand2();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof ComplexOperands)
      return this.equals((ComplexOperands)that);
    return false;
  }

  public boolean equals(ComplexOperands that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_complexOperand1 = true && this.isSetComplexOperand1();
    boolean that_present_complexOperand1 = true && that.isSetComplexOperand1();
    if (this_present_complexOperand1 || that_present_complexOperand1) {
      if (!(this_present_complexOperand1 && that_present_complexOperand1))
        return false;
      if (!this.complexOperand1.equals(that.complexOperand1))
        return false;
    }

    boolean this_present_complexOperand2 = true && this.isSetComplexOperand2();
    boolean that_present_complexOperand2 = true && that.isSetComplexOperand2();
    if (this_present_complexOperand2 || that_present_complexOperand2) {
      if (!(this_present_complexOperand2 && that_present_complexOperand2))
        return false;
      if (!this.complexOperand2.equals(that.complexOperand2))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetComplexOperand1()) ? 131071 : 524287);
    if (isSetComplexOperand1())
      hashCode = hashCode * 8191 + complexOperand1.hashCode();

    hashCode = hashCode * 8191 + ((isSetComplexOperand2()) ? 131071 : 524287);
    if (isSetComplexOperand2())
      hashCode = hashCode * 8191 + complexOperand2.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ComplexOperands other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetComplexOperand1(), other.isSetComplexOperand1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComplexOperand1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.complexOperand1, other.complexOperand1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetComplexOperand2(), other.isSetComplexOperand2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComplexOperand2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.complexOperand2, other.complexOperand2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ComplexOperands(");
    boolean first = true;

    sb.append("complexOperand1:");
    if (this.complexOperand1 == null) {
      sb.append("null");
    } else {
      sb.append(this.complexOperand1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("complexOperand2:");
    if (this.complexOperand2 == null) {
      sb.append("null");
    } else {
      sb.append(this.complexOperand2);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (complexOperand1 == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'complexOperand1' was not present! Struct: " + toString());
    }
    if (complexOperand2 == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'complexOperand2' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ComplexOperandsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ComplexOperandsStandardScheme getScheme() {
      return new ComplexOperandsStandardScheme();
    }
  }

  private static class ComplexOperandsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ComplexOperands> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ComplexOperands struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMPLEX_OPERAND1
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.complexOperand1 = new java.util.ArrayList<java.lang.Double>(_list0.size);
                double _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readDouble();
                  struct.complexOperand1.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setComplexOperand1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPLEX_OPERAND2
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.complexOperand2 = new java.util.ArrayList<java.lang.Double>(_list3.size);
                double _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readDouble();
                  struct.complexOperand2.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setComplexOperand2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ComplexOperands struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.complexOperand1 != null) {
        oprot.writeFieldBegin(COMPLEX_OPERAND1_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.complexOperand1.size()));
          for (double _iter6 : struct.complexOperand1)
          {
            oprot.writeDouble(_iter6);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.complexOperand2 != null) {
        oprot.writeFieldBegin(COMPLEX_OPERAND2_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.complexOperand2.size()));
          for (double _iter7 : struct.complexOperand2)
          {
            oprot.writeDouble(_iter7);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ComplexOperandsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ComplexOperandsTupleScheme getScheme() {
      return new ComplexOperandsTupleScheme();
    }
  }

  private static class ComplexOperandsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ComplexOperands> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ComplexOperands struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.complexOperand1.size());
        for (double _iter8 : struct.complexOperand1)
        {
          oprot.writeDouble(_iter8);
        }
      }
      {
        oprot.writeI32(struct.complexOperand2.size());
        for (double _iter9 : struct.complexOperand2)
        {
          oprot.writeDouble(_iter9);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ComplexOperands struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list10 = iprot.readListBegin(org.apache.thrift.protocol.TType.DOUBLE);
        struct.complexOperand1 = new java.util.ArrayList<java.lang.Double>(_list10.size);
        double _elem11;
        for (int _i12 = 0; _i12 < _list10.size; ++_i12)
        {
          _elem11 = iprot.readDouble();
          struct.complexOperand1.add(_elem11);
        }
      }
      struct.setComplexOperand1IsSet(true);
      {
        org.apache.thrift.protocol.TList _list13 = iprot.readListBegin(org.apache.thrift.protocol.TType.DOUBLE);
        struct.complexOperand2 = new java.util.ArrayList<java.lang.Double>(_list13.size);
        double _elem14;
        for (int _i15 = 0; _i15 < _list13.size; ++_i15)
        {
          _elem14 = iprot.readDouble();
          struct.complexOperand2.add(_elem14);
        }
      }
      struct.setComplexOperand2IsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

