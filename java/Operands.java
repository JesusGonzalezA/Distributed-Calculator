/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * Interfaz de calculadora.
 * Permite realizar las siguientes operaciones:
 *      - Suma
 *      - Resta
 *      - División
 *      - Multiplicación
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.1)", date = "2021-03-25")
public class Operands implements org.apache.thrift.TBase<Operands, Operands._Fields>, java.io.Serializable, Cloneable, Comparable<Operands> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Operands");

  private static final org.apache.thrift.protocol.TField OPERAND1_FIELD_DESC = new org.apache.thrift.protocol.TField("operand1", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField OPERAND2_FIELD_DESC = new org.apache.thrift.protocol.TField("operand2", org.apache.thrift.protocol.TType.DOUBLE, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new OperandsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new OperandsTupleSchemeFactory();

  public double operand1; // required
  public double operand2; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OPERAND1((short)1, "operand1"),
    OPERAND2((short)2, "operand2");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OPERAND1
          return OPERAND1;
        case 2: // OPERAND2
          return OPERAND2;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OPERAND1_ISSET_ID = 0;
  private static final int __OPERAND2_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OPERAND1, new org.apache.thrift.meta_data.FieldMetaData("operand1", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OPERAND2, new org.apache.thrift.meta_data.FieldMetaData("operand2", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Operands.class, metaDataMap);
  }

  public Operands() {
  }

  public Operands(
    double operand1,
    double operand2)
  {
    this();
    this.operand1 = operand1;
    setOperand1IsSet(true);
    this.operand2 = operand2;
    setOperand2IsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Operands(Operands other) {
    __isset_bitfield = other.__isset_bitfield;
    this.operand1 = other.operand1;
    this.operand2 = other.operand2;
  }

  public Operands deepCopy() {
    return new Operands(this);
  }

  @Override
  public void clear() {
    setOperand1IsSet(false);
    this.operand1 = 0.0;
    setOperand2IsSet(false);
    this.operand2 = 0.0;
  }

  public double getOperand1() {
    return this.operand1;
  }

  public Operands setOperand1(double operand1) {
    this.operand1 = operand1;
    setOperand1IsSet(true);
    return this;
  }

  public void unsetOperand1() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OPERAND1_ISSET_ID);
  }

  /** Returns true if field operand1 is set (has been assigned a value) and false otherwise */
  public boolean isSetOperand1() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OPERAND1_ISSET_ID);
  }

  public void setOperand1IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OPERAND1_ISSET_ID, value);
  }

  public double getOperand2() {
    return this.operand2;
  }

  public Operands setOperand2(double operand2) {
    this.operand2 = operand2;
    setOperand2IsSet(true);
    return this;
  }

  public void unsetOperand2() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OPERAND2_ISSET_ID);
  }

  /** Returns true if field operand2 is set (has been assigned a value) and false otherwise */
  public boolean isSetOperand2() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OPERAND2_ISSET_ID);
  }

  public void setOperand2IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OPERAND2_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case OPERAND1:
      if (value == null) {
        unsetOperand1();
      } else {
        setOperand1((java.lang.Double)value);
      }
      break;

    case OPERAND2:
      if (value == null) {
        unsetOperand2();
      } else {
        setOperand2((java.lang.Double)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case OPERAND1:
      return getOperand1();

    case OPERAND2:
      return getOperand2();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case OPERAND1:
      return isSetOperand1();
    case OPERAND2:
      return isSetOperand2();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof Operands)
      return this.equals((Operands)that);
    return false;
  }

  public boolean equals(Operands that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_operand1 = true;
    boolean that_present_operand1 = true;
    if (this_present_operand1 || that_present_operand1) {
      if (!(this_present_operand1 && that_present_operand1))
        return false;
      if (this.operand1 != that.operand1)
        return false;
    }

    boolean this_present_operand2 = true;
    boolean that_present_operand2 = true;
    if (this_present_operand2 || that_present_operand2) {
      if (!(this_present_operand2 && that_present_operand2))
        return false;
      if (this.operand2 != that.operand2)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(operand1);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(operand2);

    return hashCode;
  }

  @Override
  public int compareTo(Operands other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetOperand1(), other.isSetOperand1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperand1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operand1, other.operand1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOperand2(), other.isSetOperand2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperand2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operand2, other.operand2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Operands(");
    boolean first = true;

    sb.append("operand1:");
    sb.append(this.operand1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("operand2:");
    sb.append(this.operand2);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'operand1' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'operand2' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OperandsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public OperandsStandardScheme getScheme() {
      return new OperandsStandardScheme();
    }
  }

  private static class OperandsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Operands> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Operands struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OPERAND1
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.operand1 = iprot.readDouble();
              struct.setOperand1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OPERAND2
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.operand2 = iprot.readDouble();
              struct.setOperand2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetOperand1()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'operand1' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetOperand2()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'operand2' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Operands struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(OPERAND1_FIELD_DESC);
      oprot.writeDouble(struct.operand1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OPERAND2_FIELD_DESC);
      oprot.writeDouble(struct.operand2);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OperandsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public OperandsTupleScheme getScheme() {
      return new OperandsTupleScheme();
    }
  }

  private static class OperandsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Operands> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Operands struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeDouble(struct.operand1);
      oprot.writeDouble(struct.operand2);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Operands struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.operand1 = iprot.readDouble();
      struct.setOperand1IsSet(true);
      struct.operand2 = iprot.readDouble();
      struct.setOperand2IsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

